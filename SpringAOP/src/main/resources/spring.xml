<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
           
	
	
	
	<bean name="triangle" class="org.migue.javabrains.model.Triangle">
		<property name="name" value="Triangle name" />
	</bean>
    
    <bean name="circle" class="org.migue.javabrains.model.Circle">
		<!-- <property name="name" value="Circle name" /> -->
	</bean>

	<bean name="shapeService" class="org.migue.javabrains.service.ShapeService" autowire="byName">		
	</bean>

	<!-- if you see any classes with annotation @Aspect, you know it's an aspect... This is needed for AOP.-->
	<aop:aspectj-autoproxy />
	
	<!-- but we have to define a bean for LoggingAspect too -->
	<bean name="loggingAspect" class="org.migue.javabrains.aspect.LoggingAspect">
	</bean>
	
	<!-- we can actually configure aspects in this XML too in this way...-->
	<aop:config>
		<aop:aspect id="loggingAspect" ref="loggingAspect"> <!-- this is equivalent to @Aspect in the class -->
			<aop:pointcut expression="execution(public * get*(..))" id="allGetters"/> <!-- the allGetters() pointcut expression -->
			<aop:around  pointcut-ref="allGetters" method="myAroundAdvice"/> <!-- myAroundAdvice would run in allGetters -->
			<!-- note that we could have an "inline" expression using the "pointcut" attribute -->
		</aop:aspect>
	</aop:config>
</beans>